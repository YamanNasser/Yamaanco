// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yamaanco.Infrastructure.EF.Persistence.MSSQL.Context;

namespace Yamaanco.Infrastructure.EF.Persistence.MSSQL.Migrations.YamaancoDb
{
    [DbContext(typeof(MsSqlYamaancoDbContext))]
    [Migration("20201104152810_InitialLinkDb")]
    partial class InitialLinkDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfMember")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfViewer")
                        .HasColumnType("int");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupTypeId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupBlockList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlockProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlockProfileId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupBlockList");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Root")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UpvoteCount")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupComment");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentHashtag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Hashtag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupCommentHashtag");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentPings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MentionedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MentionedUserId");

                    b.ToTable("GroupCommentPings");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentResources", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupCommentResources");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentParent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentRoot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentTransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupCommentTransaction");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentUpvotedUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProfileId");

                    b.ToTable("GroupCommentUpvotedUser");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentViewer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ViewerProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ViewerProfileId");

                    b.ToTable("GroupCommentViewer");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupMember");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMemberRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvitedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InviterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("InviterId");

                    b.ToTable("GroupMemberRequest");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupMessage");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMessageResources", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MessageId")
                        .IsUnique()
                        .HasFilter("[MessageId] IS NOT NULL");

                    b.ToTable("GroupMessageResources");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMessageViewer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MessageId");

                    b.HasIndex("ProfileId");

                    b.ToTable("GroupMessageViewer");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationCategory")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProfileId");

                    b.ToTable("GroupNotification");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupPhotoResources", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupPhotoResources");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupType");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupViewer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ViewerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ViewerProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ViewerProfileId");

                    b.ToTable("GroupViewer");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.Profile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFollowers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfViewers")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("GenderId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileBlockList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlockProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlockProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileBlockList");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Root")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UpvoteCount")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileComment");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentHashtag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Hashtag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileCommentHashtag");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentPings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MentionedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("MentionedUserId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileCommentPings");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentResources", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileCommentResources");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentParent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentRoot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentTransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileCommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileCommentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileCommentTransaction");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentUpvotedUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileCommentUpvotedUser");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentViewer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ViewerProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ViewerProfileId");

                    b.ToTable("ProfileCommentViewer");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileFollower", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FollowedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowerProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SeenDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FollowerProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileFollower");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileFriend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FriendProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileFriend");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileMessage");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessageResources", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique()
                        .HasFilter("[MessageId] IS NOT NULL");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileMessageResources");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessageViewer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileMessageViewer");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationCategory")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileNotification");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfilePhotoResources", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoSize")
                        .HasColumnType("int");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilePhotoResources");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileViewer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ViewerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ViewerProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ViewerProfileId");

                    b.ToTable("ProfileViewer");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.UserLogsEntities.UserLoginLogs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAction")
                        .HasColumnType("int");

                    b.Property<int>("UserActionId")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLoginLogs");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.Group", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupType", "GroupType")
                        .WithMany()
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", null)
                        .WithMany("Groups")
                        .HasForeignKey("ProfileId");

                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupBlockList", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "BlockProfile")
                        .WithMany()
                        .HasForeignKey("BlockProfileId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("BlockList")
                        .HasForeignKey("GroupId");

                    b.Navigation("BlockProfile");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupComment", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("Comments")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentHashtag", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupComment", "Comment")
                        .WithMany("Hashtags")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Comment");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentPings", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupComment", "Comment")
                        .WithMany("Pings")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "MentionedUser")
                        .WithMany()
                        .HasForeignKey("MentionedUserId");

                    b.Navigation("Comment");

                    b.Navigation("Group");

                    b.Navigation("MentionedUser");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentResources", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupComment", "Comment")
                        .WithMany("CommentResources")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Comment");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentTransaction", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupComment", "Comment")
                        .WithMany("CommentTransactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("CommentTransactions")
                        .HasForeignKey("GroupId");

                    b.Navigation("Comment");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentUpvotedUser", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupComment", "Comment")
                        .WithMany("UpvotedUsers")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Group");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupCommentViewer", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupComment", "Comment")
                        .WithMany("CommentViewer")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "ViewerProfile")
                        .WithMany()
                        .HasForeignKey("ViewerProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Group");

                    b.Navigation("ViewerProfile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMember", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMemberRequest", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("MemberRequests")
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId");

                    b.Navigation("Group");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMessage", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMessageResources", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupMessage", "Message")
                        .WithOne("File")
                        .HasForeignKey("Yamaanco.Domain.Entities.GroupEntities.GroupMessageResources", "MessageId");

                    b.Navigation("Group");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMessageViewer", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Group");

                    b.Navigation("Message");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupNotification", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.GroupComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("Notifications")
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Group");

                    b.Navigation("Participant");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupPhotoResources", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("PhotoResources")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupViewer", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("Viewers")
                        .HasForeignKey("GroupId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "ViewerProfile")
                        .WithMany()
                        .HasForeignKey("ViewerProfileId");

                    b.Navigation("Group");

                    b.Navigation("ViewerProfile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.Profile", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileBlockList", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "BlockProfile")
                        .WithMany()
                        .HasForeignKey("BlockProfileId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("BlockList")
                        .HasForeignKey("ProfileId");

                    b.Navigation("BlockProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentHashtag", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", "Comment")
                        .WithMany("Hashtags")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentPings", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", "Comment")
                        .WithMany("Pings")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "MentionedUser")
                        .WithMany()
                        .HasForeignKey("MentionedUserId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Comment");

                    b.Navigation("MentionedUser");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentResources", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", "Comment")
                        .WithMany("CommentResources")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentTransaction", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", null)
                        .WithMany("CommentTransactions")
                        .HasForeignKey("ProfileCommentId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("CommentTransactions")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentUpvotedUser", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", "Comment")
                        .WithMany("UpvotedUsers")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileCommentViewer", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", "Comment")
                        .WithMany("CommentViewer")
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "ViewerProfile")
                        .WithMany()
                        .HasForeignKey("ViewerProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Profile");

                    b.Navigation("ViewerProfile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileFollower", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "FollowerProfile")
                        .WithMany()
                        .HasForeignKey("FollowerProfileId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("Followers")
                        .HasForeignKey("ProfileId");

                    b.Navigation("FollowerProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileFriend", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "FriendProfile")
                        .WithMany()
                        .HasForeignKey("FriendProfileId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("Friends")
                        .HasForeignKey("ProfileId");

                    b.Navigation("FriendProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessage", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("Messages")
                        .HasForeignKey("ProfileId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessageResources", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessage", "Message")
                        .WithOne("File")
                        .HasForeignKey("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessageResources", "MessageId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Message");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessageViewer", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Message");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileNotification", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("Notifications")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Participant");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfilePhotoResources", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("PhotoResources")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileViewer", b =>
                {
                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "Profile")
                        .WithMany("Viewers")
                        .HasForeignKey("ProfileId");

                    b.HasOne("Yamaanco.Domain.Entities.ProfileEntities.Profile", "ViewerProfile")
                        .WithMany()
                        .HasForeignKey("ViewerProfileId");

                    b.Navigation("Profile");

                    b.Navigation("ViewerProfile");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.Group", b =>
                {
                    b.Navigation("BlockList");

                    b.Navigation("Comments");

                    b.Navigation("CommentTransactions");

                    b.Navigation("MemberRequests");

                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("PhotoResources");

                    b.Navigation("Viewers");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupComment", b =>
                {
                    b.Navigation("CommentResources");

                    b.Navigation("CommentTransactions");

                    b.Navigation("CommentViewer");

                    b.Navigation("Hashtags");

                    b.Navigation("Pings");

                    b.Navigation("UpvotedUsers");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.GroupEntities.GroupMessage", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.Profile", b =>
                {
                    b.Navigation("BlockList");

                    b.Navigation("Comments");

                    b.Navigation("CommentTransactions");

                    b.Navigation("Followers");

                    b.Navigation("Friends");

                    b.Navigation("Groups");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("PhotoResources");

                    b.Navigation("Viewers");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileComment", b =>
                {
                    b.Navigation("CommentResources");

                    b.Navigation("CommentTransactions");

                    b.Navigation("CommentViewer");

                    b.Navigation("Hashtags");

                    b.Navigation("Pings");

                    b.Navigation("UpvotedUsers");
                });

            modelBuilder.Entity("Yamaanco.Domain.Entities.ProfileEntities.ProfileMessage", b =>
                {
                    b.Navigation("File");
                });
#pragma warning restore 612, 618
        }
    }
}
